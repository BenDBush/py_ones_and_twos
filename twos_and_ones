import unittest
import hypothesis
from hypothesis import given
import hypothesis.strategies as st
import re
"""Both functions allow for a series of steps 1 step long,
and tell you that there is one option for how to take them: an empty string"""


def fib_gen():
    """yields the fibonnacci sequence"""
    a, b = 0, 1
    while True:
        yield b
        a, b = b, a + b



def locate_entry_in_generator(entry, generator):
    """returns the entry-th yield of the generator specified"""
    n = 0
    for i in generator():
        if n == entry:
            return i
        elif n < entry:
            n += 1




def one_two_steps():
    series = ['']
    new_series = []
    while True:
        yield series
        new_series = [item + '1' for item in series]
        for item in new_series:
            new_item = re.sub(r'11$', r'2', item)  # locate entries ending in '11' and replace ending '11' with '2'
            if new_item not in new_series:
                new_series.append(new_item)


        series = new_series  # update the series for the yield.



class TestFiboStep(unittest.TestCase):
    @given(entry_to_find = st.integers(min_value = 1))
    def test_locater_easy(self, entry_to_find):
        a = locate_entry_in_generator(entry_to_find, lambda: range(entry_to_find+100))
        self.assertEqual(entry_to_find, a)


    @given(num_steps = st.integers(min_value = 1, max_value=100))
    def test_fibo_steps(self, num_steps):
        self.assertEqual(locate_entry_in_generator(num_steps, fib_gen),
                        len(locate_entry_in_generator(num_steps, one_two_steps))
                        )




if __name__ == '__main__':
    unittest.main()
